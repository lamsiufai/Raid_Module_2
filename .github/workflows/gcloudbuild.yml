name: Google Cloud Build

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 1: Install Node.js (For Linting, Testing, etc.)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16' # Specify your required Node version

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'  # Choose the JDK distribution (temurin, zulu, etc.)
          java-version: '11'

      - name: Set JAVA_HOME environment variable
        run: echo "JAVA_HOME=${{ steps.setup-java.outputs.java-home }}" >> $GITHUB_ENV

      - name: Verify Java Version
        run: java -version  # This will print the Java version being used

      - name: Install dependencies
        run: npm install

      - name: Fix ESLint permissions
        run: chmod +x ./node_modules/.bin/eslint

      # Step 2: Linting using ESLint
      - name: Run ESLint
        run: npm run lint
      #  run: npx eslint .
        continue-on-error: false  # This will stop the build if there are linting issues

      # Fix permissions for Jest
      - name: Fix Jest permissions
        run: chmod +x ./node_modules/.bin/jest

      # Step 3: Unit Tests using Jest (or any other test suite)
      - name: Run Unit Tests
        run: npm run test -- --coverage
        continue-on-error: false  # This will stop the build if tests fail

      # Step 4: Security Scan using Snyk
      - name: Run Snyk security scan
        run: |
          npm install -g snyk
          snyk test
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # Step 5: Code Quality Analysis using SonarQube
      # - name: Run SonarQube scan
      #   run: |
      #     #curl -sSLo sonar-scanner-cli.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-6.2.1.4610-linux-x64.zip
      #     #unzip sonar-scanner-cli.zip -d $HOME/.sonar-scanner
      #     #export PATH=$HOME/.sonar-scanner/sonar-scanner-cli-6.2.1.4610-linux-x64/bin:$PATH
      #     curl -sSLo /tmp/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
      #     unzip /tmp/sonar-scanner.zip -d $HOME
      #     export PATH=$HOME/sonar-scanner-4.6.2.2472-linux/bin:$PATH
      #     #To check if sonar scanner is installed###
      #     if ! command -v sonar-scanner &> /dev/null
      #     then
      #       echo "SonarScanner could not be found"
      #       exit 1
      #     else
      #       sonar-scanner --version
      #     fi    
          #####################################
        #   sonar-scanner -X \
        #     -Dsonar.projectKey=my-project-key \
        #     -Dsonar.sources=. \
        #     -Dsonar.host.url=https://sonarcloud.io \
        #     -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        # env:
        #   SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # Step 6: Performance Benchmarking using k6
      - name: Performance Testing with k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 33D40BC6
          echo "deb https://dl.k6.io/deb stable main" | sudo tee -a /etc/apt/sources.list
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C780D0BDB1A69C86
          sudo apt-get update
          sudo apt-get install -y k6
          k6 run ./tests/performance.js # Assuming you have a k6 script

      - name: Set up Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Authenticate Docker with gcloud
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' > ${HOME}/gcloud-key.json
          gcloud auth activate-service-account --key-file=${HOME}/gcloud-key.json
          gcloud auth configure-docker

      - name: Docker Build
        run: docker buildx build -t gcr.io/empirical-axon-438202-p3/my-app2 .

      - name: Docker Push
        run: docker push gcr.io/empirical-axon-438202-p3/my-app2
            
      - name: Trigger Cloud Build
        env:
          PORT: 80
        run: |
          gcloud builds submit
